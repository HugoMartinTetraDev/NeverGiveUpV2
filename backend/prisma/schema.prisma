// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"

}


datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String       @id @default(uuid())
  email          String       @unique
  password       String
  firstName      String
  lastName       String
  birthDate      DateTime
  address        String
  phoneNumber    String?
  userRoles      UserRole[]   // Relation many-to-many avec les rôles
  referralCode   String?      @unique
  status         UserStatus   @default(ACTIVE)
  siret          String?
  iban           String?
  ownedRestaurant Restaurant?
  orders         Order[]
  deliveries     Order[]      @relation("DeliveryAssigned")
  notifications  Notification[]
  createdAt      DateTime     @default(now())
}

// Table intermédiaire pour la relation many-to-many
model UserRole {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  role       Role
  createdAt  DateTime @default(now())

  @@unique([userId, role])
}

enum Role {
  CLIENT
  LIVREUR
  RESTAURATEUR
  ADMIN
}

enum UserStatus {
  ACTIVE
  SUSPENDED
}

model Restaurant {
  id             String        @id @default(uuid())
  name           String
  city           String
  deliveryFees   Float
  description    String
  status         RestaurantStatus @default(ACTIVE)
  menus          Menu[]
  articles       Article[]
  owner          User?         @relation(fields: [ownerId], references: [id])
  ownerId        String?       @unique
  orders         Order[]
}

enum RestaurantStatus {
  ACTIVE
  INACTIVE
}

model Menu {
  id             String       @id @default(uuid())
  name           String
  description    String
  price          Float
  restaurantId   String
  restaurant     Restaurant  @relation(fields: [restaurantId], references: [id])
  items          Article[]   @relation("MenuItems")
}

model Article {
  id             String      @id @default(uuid())
  name           String
  description    String
  price          Float
  type           String
  restaurantId   String
  restaurant     Restaurant  @relation(fields: [restaurantId], references: [id])
  menus          Menu[]      @relation("MenuItems")
  orderItems     OrderItem[]
}

model Order {
  id             String         @id @default(uuid())
  userId         String
  restaurantId   String
  deliveryAddress String
  totalAmount    Float
  deliveryFees   Float
  serviceFees    Float
  status         OrderStatus @default(PENDING)
  paymentMethod  String
  timestamps     Json
  user           User        @relation(fields: [userId], references: [id])
  restaurant     Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems     OrderItem[]
  deliveryPerson User?       @relation("DeliveryAssigned", fields: [deliveryPersonId], references: [id])
  deliveryPersonId String?
  createdAt      DateTime    @default(now())
}

model OrderItem {
  id             String         @id @default(uuid())
  orderId        String
  articleId      String
  quantity       Int
  order          Order       @relation(fields: [orderId], references: [id])
  article        Article     @relation(fields: [articleId], references: [id])
}

enum OrderStatus {
  PENDING
  ACCEPTED
  IN_PROGRESS
  READY
  DELIVERED
  CANCELED
}

model Log {
  id             String      @id @default(uuid())
  service        String
  level          String
  action         String
  message        String
  userId         String?
  orderId        String?
  metadata       Json?
  timestamp      DateTime    @default(now())
}

model Notification {
  id             String      @id @default(uuid())
  userId         String
  type           String
  template       String
  content        Json
  sentAt         DateTime    @default(now())
  user           User        @relation(fields: [userId], references: [id])
}

model Config {
  id             String      @id @default(uuid())
  key            String      @unique
  value          String
}
