generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  password        String
  firstName       String
  lastName        String
  birthDate       DateTime
  address         String
  phoneNumber     String?
  referralCode    String?        @unique
  status          String         @default("ACTIVE")
  siret           String?
  iban            String?
  createdAt       DateTime       @default(now())
  notifications   Notification[]
  deliveries      Order[]        @relation("DeliveryAssigned")
  orders          Order[]
  ownedRestaurant Restaurant?
  userRoles       UserRole[]
}

model UserRole {
  id        String   @id @default(uuid())
  userId    String
  role      String
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, role])
}

model Restaurant {
  id           String    @id @default(uuid())
  name         String
  city         String
  address      String
  phoneNumber  String?
  deliveryFees Float
  description  String
  status       String    @default("ACTIVE")
  ownerId      String?   @unique
  zipCode      String?
  articles     Article[]
  menus        Menu[]
  orders       Order[]
  owner        User?     @relation(fields: [ownerId], references: [id])
}

model Menu {
  id           String     @id @default(uuid())
  name         String
  description  String
  price        Float
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id])
  items        Article[]  @relation("MenuItems")
}

model Article {
  id           String      @id @default(uuid())
  name         String
  description  String
  price        Float
  type         String
  restaurantId String
  restaurant   Restaurant  @relation(fields: [restaurantId], references: [id])
  orderItems   OrderItem[]
  menus        Menu[]      @relation("MenuItems")
}

model Order {
  id               String      @id @default(uuid())
  userId           String
  restaurantId     String
  deliveryAddress  String
  totalAmount      Float
  deliveryFees     Float
  serviceFees      Float
  status           String      @default("PENDING")
  paymentMethod    String
  timestamps       Json
  deliveryPersonId String?
  createdAt        DateTime    @default(now())
  deliveryPerson   User?       @relation("DeliveryAssigned", fields: [deliveryPersonId], references: [id])
  restaurant       Restaurant  @relation(fields: [restaurantId], references: [id])
  user             User        @relation(fields: [userId], references: [id])
  orderItems       OrderItem[]
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  articleId String
  quantity  Int
  article   Article @relation(fields: [articleId], references: [id])
  order     Order   @relation(fields: [orderId], references: [id])
}

model Log {
  id        String   @id @default(uuid())
  service   String
  level     String
  action    String
  message   String
  userId    String?
  orderId   String?
  metadata  Json?
  timestamp DateTime @default(now())
}

model Notification {
  id       String   @id @default(uuid())
  userId   String
  type     String
  template String
  content  Json
  sentAt   DateTime @default(now())
  user     User     @relation(fields: [userId], references: [id])
}

model Config {
  id    String @id @default(uuid())
  key   String @unique
  value String
}
